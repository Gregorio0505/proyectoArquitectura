kind: pipeline
type: docker
name: CI-and-Deploy

steps:
  # ----- Cache Maven (acelera builds) -----
  - name: maven-cache-restore
    image: drillster/drone-volume-cache
    settings:
      restore: true
      mount:
        - /root/.m2
    when:
      event: [ push, pull_request ]

  # ----- Backend: tests + Sonar (bloquea por Quality Gate) -----
  - name: backend-tests-and-sonar
    image: maven:3.9-eclipse-temurin-17
    environment:
      SONAR_HOST_URL: { from_secret: sonar_host }
      SONAR_TOKEN:    { from_secret: sonar_token }
    # En Linux, esto hace que host.docker.internal apunte al host
    extra_hosts:
      - "host.docker.internal:host-gateway"
    commands:
      - cd pharmacy
      - |
        case "$DRONE_BRANCH" in
          dev)    KEY=pharmacy-backend-dev ;;
          qa)     KEY=pharmacy-backend-qa ;;
          main|master) KEY=pharmacy-backend-main ;;
          *)      KEY=pharmacy-backend-dev ;;
        esac
        mvn -B -DskipTests=false clean verify \
          org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar \
          -Dsonar.projectKey=$KEY \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.token=$SONAR_TOKEN \
          -Dsonar.qualitygate.wait=true
    when:
      event: [ push, pull_request ]

  # ----- Frontend: tests + Sonar (usa cobertura lcov) -----
  - name: frontend-tests-and-sonar
    image: node:20
    environment:
      SONAR_HOST_URL: { from_secret: sonar_host }
      SONAR_TOKEN:    { from_secret: sonar_token }
    extra_hosts:
      - "host.docker.internal:host-gateway"
    commands:
      - cd frontend
      - npm ci
      - npm run test -- --watch=false --code-coverage
      - |
        case "$DRONE_BRANCH" in
          dev)    KEY=pharmacy-frontend-dev ;;
          qa)     KEY=pharmacy-frontend-qa ;;
          main|master) KEY=pharmacy-frontend-main ;;
          *)      KEY=pharmacy-frontend-dev ;;
        esac
        npx sonar-scanner \
          -Dsonar.projectKey=$KEY \
          -Dsonar.sources=src \
          -Dsonar.exclusions=**/*.spec.ts,**/dist/**,**/node_modules/**,**/.angular/**,**/coverage/**,**/e2e/**,**/cypress/**,**/assets/**,**/environments/**,**/*.config.js,**/*.config.ts \
          -Dsonar.tests=src \
          -Dsonar.test.inclusions=**/*.spec.ts \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.token=$SONAR_TOKEN
    when:
      event: [ push, pull_request ]

  - name: maven-cache-save
    image: drillster/drone-volume-cache
    settings:
      rebuild: true
      mount:
        - /root/.m2
    when:
      event: [ push, pull_request ]

  # ----- Deploy DEV (solo tras merge/push a dev) -----
  - name: deploy-dev
    image: docker:26-cli
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
    commands:
      - docker compose -f docker-compose.dev.yml up -d --build
    when:
      event: [ push ]
      branch: [ dev ]
    depends_on:
      - backend-tests-and-sonar
      - frontend-tests-and-sonar

  # ----- Deploy QA (solo tras merge/push a qa) -----
  - name: deploy-qa
    image: docker:26-cli
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
    commands:
      - docker compose -f docker-compose.qa.yml up -d --build
    when:
      event: [ push ]
      branch: [ qa ]
    depends_on:
      - backend-tests-and-sonar
      - frontend-tests-and-sonar

  # ----- Deploy PROD (solo tras merge/push a main/master) -----
  - name: deploy-prod
    image: docker:26-cli
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
    commands:
      - docker compose -f docker-compose.prod.yml up -d --build
    when:
      event: [ push ]
      branch: [ main, master ]
    depends_on:
      - backend-tests-and-sonar
      - frontend-tests-and-sonar

  # ----- Notificación si falla (opcional) -----
  - name: notify-on-failure
  image: appleboy/drone-email
  settings:
    host:       { from_secret: smtp_host }   # smtp.gmail.com
    port:       587                          # STARTTLS
    username:   { from_secret: smtp_user }   # tu_correo@gmail.com
    password:   { from_secret: smtp_pass }   # App Password 16 chars
    from:       { from_secret: smtp_from }   # tu_correo@gmail.com
    skip_verify: false
    subject:    "[CI] Falló build en ${DRONE_REPO} #${DRONE_BUILD_NUMBER}"
    to:
      - "josegregoriocoronelcolombo@gmail.com"
      - "jflores@unis.edu.gt"
    body: >
      Repo: ${DRONE_REPO}
      Build: ${DRONE_BUILD_NUMBER}
      Branch: ${DRONE_BRANCH}
      Autor: ${DRONE_COMMIT_AUTHOR}
      Ver: ${DRONE_BUILD_LINK}
  when:
    status: [ failure ]


volumes:
  - name: dockersock
    host:
      path: /var/run/docker.sock

trigger:
  event: [ push, pull_request ]
  branch: [ dev, qa, main, master ]

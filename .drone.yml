kind: pipeline
type: docker
name: CI-and-Deploy

steps:
# -------------------- CI PARA PR (solo pull_request) --------------------
- name: backend-tests-and-sonar
  image: maven:3.9-eclipse-temurin-17
  environment:
    SONAR_HOST_URL:
      from_secret: sonar_host
    SONAR_TOKEN:
      from_secret: sonar_token
  extra_hosts:
  - host.docker.internal:host-gateway
  commands:
  - cd pharmacy
  - |
    case "$DRONE_TARGET_BRANCH" in
      dev)         KEY=pharmacy-backend-dev ;;
      qa)          KEY=pharmacy-backend-qa ;;
      main|master) KEY=pharmacy-backend-main ;;
      *)           KEY=pharmacy-backend-dev ;;
    esac
    mvn -B -DskipTests=false clean verify \
      org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar \
      -Dsonar.projectKey=$KEY \
      -Dsonar.host.url=$SONAR_HOST_URL \
      -Dsonar.token=$SONAR_TOKEN \
      -Dsonar.qualitygate.wait=true
  when:
    event: [ pull_request ]

- name: frontend-tests
  # Imagen que YA trae Node + Google Chrome (evita apt-get en la U)
  image: cypress/included:13.7.3
  environment:
    CHROME_BIN: /usr/bin/google-chrome
  extra_hosts:
  - host.docker.internal:host-gateway
  commands:
  - cd frontend
  - npm ci
  # Usa el launcher con --no-sandbox que agregaste en karma.conf.js
  - npm run test -- --watch=false --code-coverage --browsers=ChromeHeadlessCI
  when:
    event: [ pull_request ]

- name: frontend-sonar
  image: sonarsource/sonar-scanner-cli:5
  environment:
    SONAR_HOST_URL:
      from_secret: sonar_host
    SONAR_TOKEN:
      from_secret: sonar_token
  extra_hosts:
  - host.docker.internal:host-gateway
  commands:
  - cd frontend
  - |
    case "$DRONE_TARGET_BRANCH" in
      dev)         KEY=pharmacy-frontend-dev ;;
      qa)          KEY=pharmacy-frontend-qa ;;
      main|master) KEY=pharmacy-frontend-main ;;
      *)           KEY=pharmacy-frontend-dev ;;
    esac
    sonar-scanner \
      -Dsonar.projectKey=$KEY \
      -Dsonar.sources=src \
      -Dsonar.exclusions=**/*.spec.ts,**/dist/**,**/node_modules/**,**/.angular/**,**/coverage/**,**/e2e/**,**/cypress/**,**/assets/**,**/environments/**,**/*.config.js,**/*.config.ts \
      -Dsonar.tests=src \
      -Dsonar.test.inclusions=**/*.spec.ts \
      -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
      -Dsonar.host.url=$SONAR_HOST_URL \
      -Dsonar.token=$SONAR_TOKEN
  when:
    event: [ pull_request ]
  depends_on:
  - frontend-tests

# -------------------- DEPLOY SOLO EN PUSH (post-merge) --------------------
- name: deploy-dev
  image: docker:26-cli
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
  - docker compose -f docker-compose.dev.yml down --remove-orphans || true
  - docker compose -f docker-compose.dev.yml up -d --build
  when:
    event: [ push ]
    branch: [ dev ]

- name: deploy-qa
  image: docker:26-cli
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
  - docker compose -f docker-compose.qa.yml down --remove-orphans || true
  - docker compose -f docker-compose.qa.yml up -d --build
  when:
    event: [ push ]
    branch: [ qa ]

- name: deploy-prod
  image: docker:26-cli
  volumes:
  - name: dockersock
    path: /var/run/docker.sock
  commands:
  - docker compose -f docker-compose.prod.yml down --remove-orphans || true
  - docker compose -f docker-compose.prod.yml up -d --build
  when:
    event: [ push ]
    branch: [ main, master ]

# -------------------- NOTIFICACIÓN SI FALLA --------------------
- name: notify-on-failure
  image: appleboy/drone-email
  settings:
    host:
      from_secret: smtp_host
    port: 587
    username:
      from_secret: smtp_user
    password:
      from_secret: smtp_pass
    from:
      from_secret: smtp_from
    skip_verify: false
    subject: "[CI] Falló build en ${DRONE_REPO} #${DRONE_BUILD_NUMBER}"
    to:
    - josegregoriocoronelcolombo@gmail.com
    - jflores@unis.edu.gt
    body: |
      Repo: ${DRONE_REPO}
      Build: ${DRONE_BUILD_NUMBER}
      Branch: ${DRONE_BRANCH}
      Autor: ${DRONE_COMMIT_AUTHOR}
      Ver: ${DRONE_BUILD_LINK}
  when:
    status: [ failure ]

volumes:
- name: dockersock
  host:
    path: /var/run/docker.sock

# Aceptamos push y PR, pero cada step ya filtra qué evento ejecutar
trigger:
  event: [ push, pull_request ]
  branch: [ dev, qa, main, master ]
